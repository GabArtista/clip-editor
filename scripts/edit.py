# scripts/edit.py
# -*- coding: utf-8 -*-

import os
import uuid
import json
import shlex
import subprocess
from pathlib import Path


# =========================
# Utilidades
# =========================

def _abspath(p: str) -> str:
    return str(Path(p).expanduser().resolve())

def _run(cmd: list[str], *, quiet: bool = False) -> subprocess.CompletedProcess:
    """Executa um comando e retorna o CompletedProcess. Levanta exce√ß√£o com stderr se falhar."""
    if not quiet:
        print("CMD:", " ".join(shlex.quote(c) for c in cmd))
    proc = subprocess.run(cmd, capture_output=True, text=True)
    if proc.returncode != 0:
        raise RuntimeError(
            "Comando falhou:\n"
            + " ".join(shlex.quote(c) for c in cmd)
            + f"\n--- STDERR ---\n{proc.stderr}\n--- STDOUT ---\n{proc.stdout}\n"
        )
    # Loga avisos do ffmpeg/ffprobe quando houver
    if proc.stderr and not quiet:
        # ffmpeg escreve tudo em stderr, inclusive progresso;
        # mantemos s√≥ as primeiras linhas para n√£o poluir
        lines = [l for l in proc.stderr.splitlines() if l.strip()]
        if lines:
            print("FFmpeg/ffprobe:", lines[-1])
    return proc

def _ffprobe_duration(path: str) -> float:
    """Obt√©m a dura√ß√£o (segundos) via ffprobe, como float."""
    cmd = [
        "ffprobe", "-v", "error",
        "-show_entries", "format=duration",
        "-of", "json",
        path
    ]
    proc = _run(cmd, quiet=True)
    try:
        data = json.loads(proc.stdout)
        return float(data["format"]["duration"])
    except Exception as e:
        raise RuntimeError(f"N√£o foi poss√≠vel ler dura√ß√£o de {path}: {e}\nSa√≠da: {proc.stdout}")


# =========================
# L√≥gica principal (compat√≠vel com API existente)
# =========================

def adicionar_musica(
    video_path: str,
    musica_path: str,
    segundo_video: float,             # mantido p/ compat original (impacto no v√≠deo)
    output_path: str,
    music_impact: float = 51.0,       # mantido p/ compat original (impacto na m√∫sica)
    debug: bool = True,
    gain_db: float = 6.0
) -> str:
    """
    Substitui o √°udio do v√≠deo por um trecho cont√≠nuo da m√∫sica, SEM adicionar sil√™ncio.
    Alinha para que 'music_impact' (segundo na m√∫sica) ocorra exatamente em 'segundo_video' (segundo no v√≠deo).

    Regras:
    - start_music = music_impact - segundo_video
    - Trecho usado = m√∫sica[start_music : start_music + duracao_video]
    - Clampeia para nunca sair dos limites da m√∫sica.
    - Sa√≠da pronta para Reels (H.264 yuv420p + AAC).

    Par√¢metros mantidos para compatibilidade com a API atual:
    - 'segundo_video' = impacto no v√≠deo (antes voc√™ j√° usava esse nome)
    - 'music_impact'  = impacto na m√∫sica (antes voc√™ j√° usava esse nome)
    """

    print("üé¨ Iniciando a edi√ß√£o (sem sil√™ncio artificial)‚Ä¶")

    # Pastas/paths
    os.makedirs("processed", exist_ok=True)
    video_path = _abspath(video_path)
    musica_path = _abspath(musica_path)
    output_path = _abspath(output_path)

    # Valida√ß√µes b√°sicas
    if not os.path.exists(video_path):
        raise FileNotFoundError(f"V√≠deo n√£o encontrado: {video_path}")
    if not os.path.exists(musica_path):
        raise FileNotFoundError(f"M√∫sica n√£o encontrada: {musica_path}")

    # Dura√ß√µes
    duracao_video = _ffprobe_duration(video_path)
    duracao_musica = _ffprobe_duration(musica_path)
    print(f"‚úÖ Dura√ß√£o v√≠deo: {duracao_video:.3f}s | ‚úÖ Dura√ß√£o m√∫sica: {duracao_musica:.3f}s")

    # C√°lculo de alinhamento (sem sil√™ncio)
    # Queremos: music_impact no t=segundo_video do v√≠deo
    # Logo, o in√≠cio do trecho da m√∫sica que usaremos √©:
    start_music = float(music_impact) - float(segundo_video)

    # Clampeia para os limites da m√∫sica (sem sair do range)
    # 1) N√£o pode come√ßar antes do 0
    if start_music < 0:
        print(f"‚ö†Ô∏è Impacto da m√∫sica cairia antes do in√≠cio. Ajustando in√≠cio de {start_music:.3f}s ‚Üí 0.000s")
        start_music = 0.0

    # 2) N√£o pode ultrapassar o final (precisamos de 'duracao_video' de m√∫sica)
    max_start = max(0.0, duracao_musica - duracao_video)
    if start_music > max_start:
        print(f"‚ö†Ô∏è Ajuste no in√≠cio para caber o v√≠deo: {start_music:.3f}s ‚Üí {max_start:.3f}s")
        start_music = max_start

    print(f"üéØ In√≠cio do trecho da m√∫sica: {start_music:.3f}s (music_impact={music_impact:.3f}s ‚Üî segundo_video={float(segundo_video):.3f}s)")

    # √Åudio tempor√°rio (√∫nico p/ evitar corrida)
    temp_audio = os.path.join("processed", f"audio_{uuid.uuid4().hex}.wav")

    # Gerar o √°udio alinhado (sem sil√™ncio, s√≥ corte)
    # Observa√ß√£o: usamos -ss AP√ìS o -i para busca precisa (ainda que um pouco mais lenta).
    cmd_audio = [
        "ffmpeg", "-y",
        "-i", musica_path,
        "-ss", f"{start_music:.3f}",
        "-t", f"{duracao_video:.3f}",
        "-ac", "2", "-ar", "48000",
        "-af", f"volume={gain_db}dB",
        "-c:a", "pcm_s16le",
        temp_audio
    ]
    print("üéµ Gerando √°udio alinhado‚Ä¶")
    _run(cmd_audio)

    # Sanidade do √°udio gerado
    if not os.path.exists(temp_audio) or os.path.getsize(temp_audio) < 1024:
        raise RuntimeError(f"√Åudio tempor√°rio inv√°lido/pequeno: {temp_audio}")
    dur_temp = _ffprobe_duration(temp_audio)
    if dur_temp <= 0.0:
        raise RuntimeError(f"√Åudio tempor√°rio com dura√ß√£o zero: {temp_audio}")
    print(f"‚úÖ √Åudio OK ({dur_temp:.3f}s): {temp_audio}")

    # Mux final (for√ßa compatibilidade ampla p/ Reels: H.264 + yuv420p + AAC)
    cmd_final = [
        "ffmpeg", "-y",
        "-i", video_path, "-i", temp_audio,
        "-map", "0:v:0", "-map", "1:a:0",
        "-c:v", "libx264", "-pix_fmt", "yuv420p",
        "-preset", "veryfast", "-crf", "20",
        "-c:a", "aac", "-b:a", "192k", "-ar", "48000",
        "-shortest",  # Garante t√©rmino no menor fluxo (evita arrasto se algo sair fora)
        output_path
    ]
    print("üé• Renderizando v√≠deo final‚Ä¶")
    _run(cmd_final)

    # Limpeza
    try:
        if not debug and os.path.exists(temp_audio):
            os.remove(temp_audio)
    except Exception as e:
        print("‚ö†Ô∏è N√£o foi poss√≠vel remover tempor√°rio:", e)

    print(f"‚úÖ Finalizado com sucesso!\nüìÑ Sa√≠da: {output_path}")
    return output_path
